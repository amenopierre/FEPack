%> @file QuadratureObject.m
%> @brief Contains the tool.QuadratureObject class.
% =========================================================================== %
%> @brief class for quadrature rules
% =========================================================================== %
classdef QuadratureObject < FEPack.FEPackObject
  % FEPack.tools.QuadratureObject < FEPack.FEPackObject

  properties (SetAccess = protected)

    %> @brief Number of quadrature points/weights
    numQuad = 0;

    %> @brief dimension of points
    dimension = 0;

    %> @brief dxN Matrix containing the quadrature points. d is the dimension
    %> (1, 2, or 3), and N is the number points. The k-th columns contains the
    %> coordinates of the k-th quadrature point.
    points = [];

    %> @brief N vector containing the quadrature weights
    weights = [];

    %> @brief Degree of precision, that is, the maximum degree of polynomials
    %> the rule integrates exactly (if known)
    infoDegree = 0;

  end

  methods (Static)

    function quadRule = quadrature_from_points(quadRule, points, weights, infoDegree)

      % There should be as much points as there are weights
      if (size(points, 1) ~= length(weights))
        error('Le nombre de points et de poids de quadrature doivent être égaux.');
      end

      quadRule.numQuad = size(points, 1);
      quadRule.dimension = size(points, 2);
      quadRule.points = points;
      quadRule.weights = weights;

      if (nargin >= 4)
        quadRule.infoDegree = infoDegree;
      end

    end

    function quadRule = symetrical_Gauss_segment(Nquad, a, b)

      % Uses Golub-Welsch algorithm to generate a 1D Gauss Legendre quadrature
      % rule with Nquad points, used for numerical integration over an
      % interval [a, b].
      %
      % The method is described in
      %
      % Gene Golub and John H. Welsch, Mathematics of Computation 23 106 (1969), 221–230.

      if (nargin < 3), b = 1; end
      if (nargin < 2), a = 0; end

      quadRule = FEPack.tools.QuadratureObject;

      % Equivalent Jacobi matrix
      alpha = zeros(1,Nquad);
      j = 1:Nquad-1;
      beta = j ./ sqrt( (2*j-1) .* (2*j+1) );

      J = diag( alpha ) + diag( beta, 1 ) + diag( beta, -1 );

      % Eigenpairs
      [V, D] = eig(J);

      % Build the rule
      quadRule.numQuad = Nquad;
      quadRule.dimension = 1;
      quadRule.points = 0.5*(b + a) + 0.5*(b - a) * diag(D).';
      quadRule.weights = (b - a) * abs(V(1,:)).^2;

    end

    function compRule = composite_segment(varargin)

      % COMPOSITE_SEGMENT subdivides the segment in multiple pieces. On each
      % of these pieces, a quadrature rule is applied.
      %
      % The first argument (string) indicates the type of mesh:
      %     - for a uniform mesh, the syntax is
      %         mesh = meshes.MeshSegment('uniform', a, b, N, unitQuadRule)
      %       a, b are the bounds of the segment, N is the number of nodes,
      %       and unitQuadRule is the to be applied on each subdivision
      %
      %     - for a mesh generated from points, the syntax is
      %         mesh = meshes.MeshSegment('vertices', points, unitQuadRule)
      %       points is a list of the nodes.

      % Trivial case: uniform mesh with less than two points
      if (strcmpi(varargin{1}, 'uniform') && (varargin{4} < 2))

        compRule.points = 0.0;
        compRule.weights = 1.0;

      else

        entrees = varargin;

        % Default quadrature for the subdivisions
        if ((strcmpi(varargin{1}, 'uniform')  && nargin < 5) ||...
            (strcmpi(varargin{1}, 'vertices') && nargin < 3))

          unitQuadRule = FEPack.tools.QuadratureObject(1);

        else

          unitQuadRule = entrees{end};
          entrees(end) = [];

        end

        nodes = FEPack.meshes.MeshSegment(entrees{:}).points(:, 1);
        Len = nodes(2:end, :) - nodes(1:end-1, :);
        Nquad = unitQuadRule.numQuad;

        compRule.points = nodes(1:end-1, :) * ones(1, Nquad) + Len * unitQuadRule.points;
        compRule.weights = Len * unitQuadRule.weights;

        compRule.points = compRule.points(:);
        compRule.weights = compRule.weights(:);

      end

      compRule.numQuad = length(compRule.weights);
      compRule.dimension = 1;

    end

    function quadRule = Gauss_Lobatto_order_3
      % 4-point Gauss-Lobatto rule of order 3
      quadRule = FEPack.tools.QuadratureObject;
      quadRule.points = [...
        %
        1/3, 1/3;...
        1/5, 1/5;...
        1/5, 3/5;...
        3/5, 1/5;...
      ].';

      quadRule.weights = [...
        %
        -9/32;...
        25/96;...
        25/96;...
        25/96;...
      ].';
    end

    function quadRule = symetrical_Gauss_triangle(ord)

      % Quadrature rule for the reference triangle
      % Table taken from XLiFE++ sources
      quadRule = FEPack.tools.QuadratureObject;

      switch (ord)
      case 1

        quadRule.points = [0.3333333333333330, 0.3333333333333330].';

        quadRule.weights = 0.5000000000000000;

      case 2

        quadRule.points = [...
          %
          0.1666666666666670, 0.6666666666666670;...
          0.6666666666666670, 0.1666666666666670;...
          0.1666666666666670, 0.1666666666666670;...
        ].';

        quadRule.weights = [...
          %
          0.1666666666666670;...
          0.1666666666666670;...
          0.1666666666666670;...
        ].';

      case 4

        quadRule.points = [...
          %
          0.4459484909159650, 0.1081030181680700;...
          0.1081030181680700, 0.4459484909159650;...
          0.4459484909159650, 0.4459484909159650;...
          0.0915762135097707, 0.8168475729804590;...
          0.8168475729804590, 0.0915762135097707;...
          0.0915762135097707, 0.0915762135097707;...
        ].';

        quadRule.weights = [...
          %
          0.1116907948390060;...
          0.1116907948390060;...
          0.1116907948390060;...
          0.0549758718276609;...
          0.0549758718276609;...
          0.0549758718276609;...
        ].';

      case 5

        quadRule.points = [...
          %
          0.3333333333333330, 0.3333333333333330;...
          0.1012865073234560, 0.7974269853530870;...
          0.7974269853530870, 0.1012865073234560;...
          0.1012865073234560, 0.1012865073234560;...
          0.4701420641051150, 0.0597158717897698;...
          0.0597158717897698, 0.4701420641051150;...
          0.4701420641051150, 0.4701420641051150;...
        ].';

        quadRule.weights = [...
          %
          0.1125000000000000;...
          0.0629695902724136;...
          0.0629695902724136;...
          0.0629695902724136;...
          0.0661970763942531;...
          0.0661970763942531;...
          0.0661970763942531;...
        ].';

      case 6

        quadRule.points = [...
          %
          0.0630890144915022, 0.8738219710169960;...
          0.8738219710169960, 0.0630890144915022;...
          0.0630890144915022, 0.0630890144915022;...
          0.2492867451709100, 0.5014265096581790;...
          0.5014265096581790, 0.2492867451709100;...
          0.2492867451709100, 0.2492867451709100;...
          0.0531450498448169, 0.6365024991213990;...
          0.6365024991213990, 0.0531450498448169;...
          0.3103524510337840, 0.6365024991213990;...
          0.6365024991213990, 0.3103524510337840;...
          0.3103524510337840, 0.0531450498448169;...
          0.0531450498448169, 0.3103524510337840;...
        ].';

        quadRule.weights = [...
          %
          0.0254224531851034;...
          0.0254224531851034;...
          0.0254224531851034;...
          0.0583931378631897;...
          0.0583931378631897;...
          0.0583931378631897;...
          0.0414255378091868;...
          0.0414255378091868;...
          0.0414255378091868;...
          0.0414255378091868;...
          0.0414255378091868;...
          0.0414255378091868;...
        ].';

      case 7

        quadRule.points = [...
          %
          0.0337306485545879, 0.9325387028908240;...
          0.9325387028908240, 0.0337306485545879;...
          0.0337306485545879, 0.0337306485545879;...
          0.2415773825954040, 0.5168452348091930;...
          0.5168452348091930, 0.2415773825954040;...
          0.2415773825954040, 0.2415773825954040;...
          0.4743096925047180, 0.0513806149905635;...
          0.0513806149905635, 0.4743096925047180;...
          0.4743096925047180, 0.4743096925047180;...
          0.0470366446525952, 0.7542800405500530;...
          0.7542800405500530, 0.0470366446525952;...
          0.1986833147973520, 0.7542800405500530;...
          0.7542800405500530, 0.1986833147973520;...
          0.1986833147973520, 0.0470366446525952;...
          0.0470366446525952, 0.1986833147973520;...
        ].';

        quadRule.weights = [...
          %
          0.0082725250553961;...
          0.0082725250553961;...
          0.0082725250553961;...
          0.0639720856150778;...
          0.0639720856150778;...
          0.0639720856150778;...
          0.0385433230929930;...
          0.0385433230929930;...
          0.0385433230929930;...
          0.0279393664515999;...
          0.0279393664515999;...
          0.0279393664515999;...
          0.0279393664515999;...
          0.0279393664515999;...
          0.0279393664515999;...
        ].';

      case 8

        quadRule.points = [...
          %
          0.3333333333333330, 0.3333333333333330;...
          0.4592925882927230, 0.0814148234145537;...
          0.0814148234145537, 0.4592925882927230;...
          0.4592925882927230, 0.4592925882927230;...
          0.1705693077517600, 0.6588613844964800;...
          0.6588613844964800, 0.1705693077517600;...
          0.1705693077517600, 0.1705693077517600;...
          0.0505472283170310, 0.8989055433659380;...
          0.8989055433659380, 0.0505472283170310;...
          0.0505472283170310, 0.0505472283170310;...
          0.0083947774099576, 0.7284923929554040;...
          0.7284923929554040, 0.0083947774099576;...
          0.2631128296346380, 0.7284923929554040;...
          0.7284923929554040, 0.2631128296346380;...
          0.2631128296346380, 0.0083947774099576;...
          0.0083947774099576, 0.2631128296346380;...
        ].';

        quadRule.weights = [...
          %
          0.0721578038388936;...
          0.0475458171336423;...
          0.0475458171336423;...
          0.0475458171336423;...
          0.0516086852673591;...
          0.0516086852673591;...
          0.0516086852673591;...
          0.0162292488115990;...
          0.0162292488115990;...
          0.0162292488115990;...
          0.0136151570872175;...
          0.0136151570872175;...
          0.0136151570872175;...
          0.0136151570872175;...
          0.0136151570872175;...
          0.0136151570872175;...
        ].';

      case 9

        quadRule.points = [...
          %
          0.3333333333333330, 0.3333333333333330;...
          0.4370895914929370, 0.1258208170141270;...
          0.1258208170141270, 0.4370895914929370;...
          0.4370895914929370, 0.4370895914929370;...
          0.1882035356190330, 0.6235929287619350;...
          0.6235929287619350, 0.1882035356190330;...
          0.1882035356190330, 0.1882035356190330;...
          0.4896825191987380, 0.0206349616025247;...
          0.0206349616025247, 0.4896825191987380;...
          0.4896825191987380, 0.4896825191987380;...
          0.0447295133944527, 0.9105409732110950;...
          0.9105409732110950, 0.0447295133944527;...
          0.0447295133944527, 0.0447295133944527;...
          0.0368384120547363, 0.7411985987844980;...
          0.7411985987844980, 0.0368384120547363;...
          0.2219629891607660, 0.7411985987844980;...
          0.7411985987844980, 0.2219629891607660;...
          0.2219629891607660, 0.0368384120547363;...
          0.0368384120547363, 0.2219629891607660;...
        ].';

        quadRule.weights = [...
          %
          0.0485678981413994;...
          0.0389137705023871;...
          0.0389137705023871;...
          0.0389137705023871;...
          0.0398238694636051;...
          0.0398238694636051;...
          0.0398238694636051;...
          0.0156673501135695;...
          0.0156673501135695;...
          0.0156673501135695;...
          0.0127888378293490;...
          0.0127888378293490;...
          0.0127888378293490;...
          0.0216417696886447;...
          0.0216417696886447;...
          0.0216417696886447;...
          0.0216417696886447;...
          0.0216417696886447;...
          0.0216417696886447;...
        ].';

      case 10

        quadRule.points = [...
          %
          0.3333333333333330, 0.3333333333333330;...
          0.0320553732169435, 0.9358892535661130;...
          0.9358892535661130, 0.0320553732169435;...
          0.0320553732169435, 0.0320553732169435;...
          0.1421611010565640, 0.7156777978868710;...
          0.7156777978868710, 0.1421611010565640;...
          0.1421611010565640, 0.1421611010565640;...
          0.3218129952888350, 0.5300541189273440;...
          0.5300541189273440, 0.3218129952888350;...
          0.1481328857838210, 0.5300541189273440;...
          0.5300541189273440, 0.1481328857838210;...
          0.1481328857838210, 0.3218129952888350;...
          0.3218129952888350, 0.1481328857838210;...
          0.0296198894887298, 0.6012333286834590;...
          0.6012333286834590, 0.0296198894887298;...
          0.3691467818278110, 0.6012333286834590;...
          0.6012333286834590, 0.3691467818278110;...
          0.3691467818278110, 0.0296198894887298;...
          0.0296198894887298, 0.3691467818278110;...
          0.0283676653399384, 0.8079306009228790;...
          0.8079306009228790, 0.0283676653399384;...
          0.1637017337371830, 0.8079306009228790;...
          0.8079306009228790, 0.1637017337371830;...
          0.1637017337371830, 0.0283676653399384;...
          0.0283676653399384, 0.1637017337371830;...
        ].';

        quadRule.weights = [...
          %
          0.0408716645731430;...
          0.0066764844065748;...
          0.0066764844065748;...
          0.0066764844065748;...
          0.0229789818023724;...
          0.0229789818023724;...
          0.0229789818023724;...
          0.0319524531982120;...
          0.0319524531982120;...
          0.0319524531982120;...
          0.0319524531982120;...
          0.0319524531982120;...
          0.0319524531982120;...
          0.0170923240814797;...
          0.0170923240814797;...
          0.0170923240814797;...
          0.0170923240814797;...
          0.0170923240814797;...
          0.0170923240814797;...
          0.0126488788536442;...
          0.0126488788536442;...
          0.0126488788536442;...
          0.0126488788536442;...
          0.0126488788536442;...
          0.0126488788536442;...
        ].';

      otherwise

        error(['La règle d''ordre', int2str(Nquad), 'n''est pas prise en charge.']);

      end

      quadRule.numQuad = length(quadRule.weights);
      quadRule.dimension = 2;

    end

    function quadRule = symetrical_Gauss_tetrahedron(ord)

      % Quadrature rule for the reference tetrahedron
      % Table taken from XLiFE++ sources
      quadRule = FEPack.tools.QuadratureObject;

      switch (ord)
      case 1

        quadRule.points = [0.25, 0.25, 0.25].';
        quadRule.weights = 0.166666666666667;

      case 2

        quadRule.points = [
          0.138196601125011, 0.138196601125011, 0.585410196624968;...
          0.138196601125011, 0.585410196624968, 0.138196601125011;...
          0.585410196624968, 0.138196601125011, 0.138196601125011;...
          0.138196601125011, 0.138196601125011, 0.138196601125011;...
        ].';...

        quadRule.weights = [
          0.0416666666666667;...
          0.0416666666666667;...
          0.0416666666666667;...
          0.0416666666666667;...
        ].';

      case 3

        quadRule.points = [...
          0.328163302516382,  0.328163302516382,  0.0155100924508549;...
          0.328163302516382,  0.0155100924508549, 0.328163302516382;...
          0.0155100924508549, 0.328163302516382,  0.328163302516382;...
          0.328163302516382,  0.328163302516382,  0.328163302516382;...
          0.108047249898429,  0.108047249898429,  0.675858250304714;...
          0.108047249898429,  0.675858250304714,  0.108047249898429;...
          0.675858250304714,  0.108047249898429,  0.108047249898429;...
          0.108047249898429,  0.108047249898429,  0.108047249898429;...
        ].';

        quadRule.weights = [...
          0.0227029737561812;...
          0.0227029737561812;...
          0.0227029737561812;...
          0.0227029737561812;...
          0.0189636929104854;...
          0.0189636929104854;...
          0.0189636929104854;...
          0.0189636929104854;...
        ].';

      case 5

        quadRule.points = [...
          %
          0.3108859192633010, 0.3108859192633010, 0.0673422422100982;...
          0.3108859192633010, 0.0673422422100982, 0.3108859192633010;...
          0.0673422422100982, 0.3108859192633010, 0.3108859192633010;...
          0.3108859192633010, 0.3108859192633010, 0.3108859192633010;...
          0.0927352503108912, 0.0927352503108912, 0.7217942490673260;...
          0.0927352503108912, 0.7217942490673260, 0.0927352503108912;...
          0.7217942490673260, 0.0927352503108912, 0.0927352503108912;...
          0.0927352503108912, 0.0927352503108912, 0.0927352503108912;...
          0.0455037041256496, 0.4544962958743500, 0.4544962958743500;...
          0.4544962958743500, 0.0455037041256496, 0.4544962958743500;...
          0.0455037041256496, 0.0455037041256496, 0.4544962958743500;...
          0.0455037041256496, 0.4544962958743500, 0.0455037041256496;...
          0.4544962958743500, 0.0455037041256496, 0.0455037041256496;...
          0.4544962958743500, 0.4544962958743500, 0.0455037041256496;...
        ].';

        quadRule.weights = [...
          %
          0.0187813209530026;...
          0.0187813209530026;...
          0.0187813209530026;...
          0.0187813209530026;...
          0.0122488405193937;...
          0.0122488405193937;...
          0.0122488405193937;...
          0.0122488405193937;...
          0.0070910034628469;...
          0.0070910034628469;...
          0.0070910034628469;...
          0.0070910034628469;...
          0.0070910034628469;...
          0.0070910034628469;...
        ].';

      case 6

        quadRule.points = [...
          %
          0.0406739585346114, 0.0406739585346114, 0.8779781243961660;...
          0.0406739585346114, 0.8779781243961660, 0.0406739585346114;...
          0.8779781243961660, 0.0406739585346114, 0.0406739585346114;...
          0.0406739585346114, 0.0406739585346114, 0.0406739585346114;...
          0.3223378901422750, 0.3223378901422750, 0.0329863295731735;...
          0.3223378901422750, 0.0329863295731735, 0.3223378901422750;...
          0.0329863295731735, 0.3223378901422750, 0.3223378901422750;...
          0.3223378901422750, 0.3223378901422750, 0.3223378901422750;...
          0.2146028712591520, 0.2146028712591520, 0.3561913862225440;...
          0.2146028712591520, 0.3561913862225440, 0.2146028712591520;...
          0.3561913862225440, 0.2146028712591520, 0.2146028712591520;...
          0.2146028712591520, 0.2146028712591520, 0.2146028712591520;...
          0.6030056647916490, 0.0636610018750175, 0.2696723314583160;...
          0.6030056647916490, 0.0636610018750175, 0.0636610018750175;...
          0.0636610018750175, 0.0636610018750175, 0.6030056647916490;...
          0.2696723314583160, 0.6030056647916490, 0.0636610018750175;...
          0.0636610018750175, 0.2696723314583160, 0.6030056647916490;...
          0.0636610018750175, 0.6030056647916490, 0.0636610018750175;...
          0.2696723314583160, 0.0636610018750175, 0.6030056647916490;...
          0.0636610018750175, 0.2696723314583160, 0.0636610018750175;...
          0.0636610018750175, 0.0636610018750175, 0.2696723314583160;...
          0.0636610018750175, 0.6030056647916490, 0.2696723314583160;...
          0.2696723314583160, 0.0636610018750175, 0.0636610018750175;...
          0.6030056647916490, 0.2696723314583160, 0.0636610018750175;...
        ].';

        quadRule.weights = [...
          %
          0.0016795351758868;...
          0.0016795351758868;...
          0.0016795351758868;...
          0.0016795351758868;...
          0.0092261969239424;...
          0.0092261969239424;...
          0.0092261969239424;...
          0.0092261969239424;...
          0.0066537917096946;...
          0.0066537917096946;...
          0.0066537917096946;...
          0.0066537917096946;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
          0.0080357142857143;...
        ].';

      case 7

        quadRule.points = [...
          %
          0.2500000000000000, 0.2500000000000000, 0.2500000000000000;...
          0.3157011497782030, 0.3157011497782030, 0.0528965506653916;...
          0.3157011497782030, 0.0528965506653916, 0.3157011497782030;...
          0.0528965506653916, 0.3157011497782030, 0.3157011497782030;...
          0.3157011497782030, 0.3157011497782030, 0.3157011497782030;...
          0.0504898225983964, 0.4495101774016040, 0.4495101774016040;...
          0.4495101774016040, 0.0504898225983964, 0.4495101774016040;...
          0.0504898225983964, 0.0504898225983964, 0.4495101774016040;...
          0.0504898225983964, 0.4495101774016040, 0.0504898225983964;...
          0.4495101774016040, 0.0504898225983964, 0.0504898225983964;...
          0.4495101774016040, 0.4495101774016040, 0.0504898225983964;...
          0.5751716375870000, 0.1888338310260010, 0.0471607003609979;...
          0.5751716375870000, 0.1888338310260010, 0.1888338310260010;...
          0.1888338310260010, 0.1888338310260010, 0.5751716375870000;...
          0.0471607003609979, 0.5751716375870000, 0.1888338310260010;...
          0.1888338310260010, 0.0471607003609979, 0.5751716375870000;...
          0.1888338310260010, 0.5751716375870000, 0.1888338310260010;...
          0.0471607003609979, 0.1888338310260010, 0.5751716375870000;...
          0.1888338310260010, 0.0471607003609979, 0.1888338310260010;...
          0.1888338310260010, 0.1888338310260010, 0.0471607003609979;...
          0.1888338310260010, 0.5751716375870000, 0.0471607003609979;...
          0.0471607003609979, 0.1888338310260010, 0.1888338310260010;...
          0.5751716375870000, 0.0471607003609979, 0.1888338310260010;...
          0.8108302410985490, 0.0212654725414832, 0.1466388138184850;...
          0.8108302410985490, 0.0212654725414832, 0.0212654725414832;...
          0.0212654725414832, 0.0212654725414832, 0.8108302410985490;...
          0.1466388138184850, 0.8108302410985490, 0.0212654725414832;...
          0.0212654725414832, 0.1466388138184850, 0.8108302410985490;...
          0.0212654725414832, 0.8108302410985490, 0.0212654725414832;...
          0.1466388138184850, 0.0212654725414832, 0.8108302410985490;...
          0.0212654725414832, 0.1466388138184850, 0.0212654725414832;...
          0.0212654725414832, 0.0212654725414832, 0.1466388138184850;...
          0.0212654725414832, 0.8108302410985490, 0.1466388138184850;...
          0.1466388138184850, 0.0212654725414832, 0.0212654725414832;...
          0.8108302410985490, 0.1466388138184850, 0.0212654725414832;...
        ].';

        quadRule.weights = [...
          %
          0.0159142149106885;...
          0.0070549302016612;...
          0.0070549302016612;...
          0.0070549302016612;...
          0.0070549302016612;...
          0.0053161546388096;...
          0.0053161546388096;...
          0.0053161546388096;...
          0.0053161546388096;...
          0.0053161546388096;...
          0.0053161546388096;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0062011884547224;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
          0.0013517951383172;...
        ].';

      case 8

        quadRule.points = [...
          %
          0.1079527249622110, 0.1079527249622110, 0.6761418251133670;...
          0.1079527249622110, 0.6761418251133670, 0.1079527249622110;...
          0.6761418251133670, 0.1079527249622110, 0.1079527249622110;...
          0.1079527249622110, 0.1079527249622110, 0.1079527249622110;...
          0.1851094877825870, 0.1851094877825870, 0.4446715366522400;...
          0.1851094877825870, 0.4446715366522400, 0.1851094877825870;...
          0.4446715366522400, 0.1851094877825870, 0.1851094877825870;...
          0.1851094877825870, 0.1851094877825870, 0.1851094877825870;...
          0.0423165436847673, 0.0423165436847673, 0.8730503689456980;...
          0.0423165436847673, 0.8730503689456980, 0.0423165436847673;...
          0.8730503689456980, 0.0423165436847673, 0.0423165436847673;...
          0.0423165436847673, 0.0423165436847673, 0.0423165436847673;...
          0.3141817091240390, 0.3141817091240390, 0.0574548726278830;...
          0.3141817091240390, 0.0574548726278830, 0.3141817091240390;...
          0.0574548726278830, 0.3141817091240390, 0.3141817091240390;...
          0.3141817091240390, 0.3141817091240390, 0.3141817091240390;...
          0.4355913285838300, 0.0644086714161698, 0.0644086714161698;...
          0.0644086714161698, 0.4355913285838300, 0.0644086714161698;...
          0.4355913285838300, 0.4355913285838300, 0.0644086714161698;...
          0.4355913285838300, 0.0644086714161698, 0.4355913285838300;...
          0.0644086714161698, 0.4355913285838300, 0.4355913285838300;...
          0.0644086714161698, 0.0644086714161698, 0.4355913285838300;...
          0.7174640634263080, 0.0214339301271306, 0.2396680763194310;...
          0.7174640634263080, 0.0214339301271306, 0.0214339301271306;...
          0.0214339301271306, 0.0214339301271306, 0.7174640634263080;...
          0.2396680763194310, 0.7174640634263080, 0.0214339301271306;...
          0.0214339301271306, 0.2396680763194310, 0.7174640634263080;...
          0.0214339301271306, 0.7174640634263080, 0.0214339301271306;...
          0.2396680763194310, 0.0214339301271306, 0.7174640634263080;...
          0.0214339301271306, 0.2396680763194310, 0.0214339301271306;...
          0.0214339301271306, 0.0214339301271306, 0.2396680763194310;...
          0.0214339301271306, 0.7174640634263080, 0.2396680763194310;...
          0.2396680763194310, 0.0214339301271306, 0.0214339301271306;...
          0.7174640634263080, 0.2396680763194310, 0.0214339301271306;...
          0.5837973783021440, 0.2041393338760290, 0.0079239539457973;...
          0.5837973783021440, 0.2041393338760290, 0.2041393338760290;...
          0.2041393338760290, 0.2041393338760290, 0.5837973783021440;...
          0.0079239539457973, 0.5837973783021440, 0.2041393338760290;...
          0.2041393338760290, 0.0079239539457973, 0.5837973783021440;...
          0.2041393338760290, 0.5837973783021440, 0.2041393338760290;...
          0.0079239539457973, 0.2041393338760290, 0.5837973783021440;...
          0.2041393338760290, 0.0079239539457973, 0.2041393338760290;...
          0.2041393338760290, 0.2041393338760290, 0.0079239539457973;...
          0.2041393338760290, 0.5837973783021440, 0.0079239539457973;...
          0.0079239539457973, 0.2041393338760290, 0.2041393338760290;...
          0.5837973783021440, 0.0079239539457973, 0.2041393338760290;...
        ].';

        quadRule.weights = [...
          %
          0.0044044418180681;...
          0.0044044418180681;...
          0.0044044418180681;...
          0.0044044418180681;...
          0.0086719579272897;...
          0.0086719579272897;...
          0.0086719579272897;...
          0.0086719579272897;...
          0.0012542093589234;...
          0.0012542093589234;...
          0.0012542093589234;...
          0.0012542093589234;...
          0.0069606304761558;...
          0.0069606304761558;...
          0.0069606304761558;...
          0.0069606304761558;...
          0.0060468217102181;...
          0.0060468217102181;...
          0.0060468217102181;...
          0.0060468217102181;...
          0.0060468217102181;...
          0.0060468217102181;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0011928171484741;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
          0.0025755810251601;...
        ].';

      case 9

        quadRule.points = [...
          %
          0.2500000000000000, 0.2500000000000000, 0.2500000000000000;...
          0.0000000006198170, 0.0000000006198170, 0.9999999981405490;...
          0.0000000006198170, 0.9999999981405490, 0.0000000006198170;...
          0.9999999981405490, 0.0000000006198170, 0.0000000006198170;...
          0.0000000006198170, 0.0000000006198170, 0.0000000006198170;...
          0.1607745353952620, 0.1607745353952620, 0.5176763938142150;...
          0.1607745353952620, 0.5176763938142150, 0.1607745353952620;...
          0.5176763938142150, 0.1607745353952620, 0.1607745353952620;...
          0.1607745353952620, 0.1607745353952620, 0.1607745353952620;...
          0.3222765218214210, 0.3222765218214210, 0.0331704345357371;...
          0.3222765218214210, 0.0331704345357371, 0.3222765218214210;...
          0.0331704345357371, 0.3222765218214210, 0.3222765218214210;...
          0.3222765218214210, 0.3222765218214210, 0.3222765218214210;...
          0.0451089183454136, 0.0451089183454136, 0.8646732449637590;...
          0.0451089183454136, 0.8646732449637590, 0.0451089183454136;...
          0.8646732449637590, 0.0451089183454136, 0.0451089183454136;...
          0.0451089183454136, 0.0451089183454136, 0.0451089183454136;...
          0.1122965460043760, 0.3877034539956240, 0.3877034539956240;...
          0.3877034539956240, 0.1122965460043760, 0.3877034539956240;...
          0.1122965460043760, 0.1122965460043760, 0.3877034539956240;...
          0.1122965460043760, 0.3877034539956240, 0.1122965460043760;...
          0.3877034539956240, 0.1122965460043760, 0.1122965460043760;...
          0.3877034539956240, 0.3877034539956240, 0.1122965460043760;...
          0.0025545792330413, 0.4588714487524590, 0.0797025232620401;...
          0.0025545792330413, 0.4588714487524590, 0.4588714487524590;...
          0.4588714487524590, 0.4588714487524590, 0.0025545792330413;...
          0.0797025232620401, 0.0025545792330413, 0.4588714487524590;...
          0.4588714487524590, 0.0797025232620401, 0.0025545792330413;...
          0.4588714487524590, 0.0025545792330413, 0.4588714487524590;...
          0.0797025232620401, 0.4588714487524590, 0.0025545792330413;...
          0.4588714487524590, 0.0797025232620401, 0.4588714487524590;...
          0.4588714487524590, 0.4588714487524590, 0.0797025232620401;...
          0.4588714487524590, 0.0025545792330413, 0.0797025232620401;...
          0.0797025232620401, 0.4588714487524590, 0.4588714487524590;...
          0.0025545792330413, 0.0797025232620401, 0.4588714487524590;...
          0.7183503264420750, 0.0337758706853386, 0.2140979321872480;...
          0.7183503264420750, 0.0337758706853386, 0.0337758706853386;...
          0.0337758706853386, 0.0337758706853386, 0.7183503264420750;...
          0.2140979321872480, 0.7183503264420750, 0.0337758706853386;...
          0.0337758706853386, 0.2140979321872480, 0.7183503264420750;...
          0.0337758706853386, 0.7183503264420750, 0.0337758706853386;...
          0.2140979321872480, 0.0337758706853386, 0.7183503264420750;...
          0.0337758706853386, 0.2140979321872480, 0.0337758706853386;...
          0.0337758706853386, 0.0337758706853386, 0.2140979321872480;...
          0.0337758706853386, 0.7183503264420750, 0.2140979321872480;...
          0.2140979321872480, 0.0337758706853386, 0.0337758706853386;...
          0.7183503264420750, 0.2140979321872480, 0.0337758706853386;...
          0.0344159105781753, 0.1836413698099280, 0.5983013498019690;...
          0.0344159105781753, 0.1836413698099280, 0.1836413698099280;...
          0.1836413698099280, 0.1836413698099280, 0.0344159105781753;...
          0.5983013498019690, 0.0344159105781753, 0.1836413698099280;...
          0.1836413698099280, 0.5983013498019690, 0.0344159105781753;...
          0.1836413698099280, 0.0344159105781753, 0.1836413698099280;...
          0.5983013498019690, 0.1836413698099280, 0.0344159105781753;...
          0.1836413698099280, 0.5983013498019690, 0.1836413698099280;...
          0.1836413698099280, 0.1836413698099280, 0.5983013498019690;...
          0.1836413698099280, 0.0344159105781753, 0.5983013498019690;...
          0.5983013498019690, 0.1836413698099280, 0.1836413698099280;...
          0.0344159105781753, 0.5983013498019690, 0.1836413698099280;...
        ].';

        quadRule.weights = [...
          %
          0.0096684248187467;...
          0.0000107198802932;...
          0.0000107198802932;...
          0.0000107198802932;...
          0.0000107198802932;...
          0.0038622230770709;...
          0.0038622230770709;...
          0.0038622230770709;...
          0.0038622230770709;...
          0.0049271520559049;...
          0.0049271520559049;...
          0.0049271520559049;...
          0.0049271520559049;...
          0.0013439966632694;...
          0.0013439966632694;...
          0.0013439966632694;...
          0.0013439966632694;...
          0.0063556800172837;...
          0.0063556800172837;...
          0.0063556800172837;...
          0.0063556800172837;...
          0.0063556800172837;...
          0.0063556800172837;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0013974036997164;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0017057598921242;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
          0.0034208193279980;...
        ].';

      case 10

        quadRule.points = [...
          %
          0.2500000000000000, 0.2500000000000000, 0.2500000000000000;...
          0.3122500686951890, 0.3122500686951890, 0.0632497939144341;...
          0.3122500686951890, 0.0632497939144341, 0.3122500686951890;...
          0.0632497939144341, 0.3122500686951890, 0.3122500686951890;...
          0.3122500686951890, 0.3122500686951890, 0.3122500686951890;...
          0.1143096538573460, 0.1143096538573460, 0.6570710384279620;...
          0.1143096538573460, 0.6570710384279620, 0.1143096538573460;...
          0.6570710384279620, 0.1143096538573460, 0.1143096538573460;...
          0.1143096538573460, 0.1143096538573460, 0.1143096538573460;...
          0.1654860256196110, 0.4104307392189660, 0.0136524959424580;...
          0.1654860256196110, 0.4104307392189660, 0.4104307392189660;...
          0.4104307392189660, 0.4104307392189660, 0.1654860256196110;...
          0.0136524959424580, 0.1654860256196110, 0.4104307392189660;...
          0.4104307392189660, 0.0136524959424580, 0.1654860256196110;...
          0.4104307392189660, 0.1654860256196110, 0.4104307392189660;...
          0.0136524959424580, 0.4104307392189660, 0.1654860256196110;...
          0.4104307392189660, 0.0136524959424580, 0.4104307392189660;...
          0.4104307392189660, 0.4104307392189660, 0.0136524959424580;...
          0.4104307392189660, 0.1654860256196110, 0.0136524959424580;...
          0.0136524959424580, 0.4104307392189660, 0.4104307392189660;...
          0.1654860256196110, 0.0136524959424580, 0.4104307392189660;...
          0.9429887673452050, 0.0061380088247907, 0.0447352150052136;...
          0.9429887673452050, 0.0061380088247907, 0.0061380088247907;...
          0.0061380088247907, 0.0061380088247907, 0.9429887673452050;...
          0.0447352150052136, 0.9429887673452050, 0.0061380088247907;...
          0.0061380088247907, 0.0447352150052136, 0.9429887673452050;...
          0.0061380088247907, 0.9429887673452050, 0.0061380088247907;...
          0.0447352150052136, 0.0061380088247907, 0.9429887673452050;...
          0.0061380088247907, 0.0447352150052136, 0.0061380088247907;...
          0.0061380088247907, 0.0061380088247907, 0.0447352150052136;...
          0.0061380088247907, 0.9429887673452050, 0.0447352150052136;...
          0.0447352150052136, 0.0061380088247907, 0.0061380088247907;...
          0.9429887673452050, 0.0447352150052136, 0.0061380088247907;...
          0.4771903799042800, 0.1210501811455890, 0.2807092578045410;...
          0.4771903799042800, 0.1210501811455890, 0.1210501811455890;...
          0.1210501811455890, 0.1210501811455890, 0.4771903799042800;...
          0.2807092578045410, 0.4771903799042800, 0.1210501811455890;...
          0.1210501811455890, 0.2807092578045410, 0.4771903799042800;...
          0.1210501811455890, 0.4771903799042800, 0.1210501811455890;...
          0.2807092578045410, 0.1210501811455890, 0.4771903799042800;...
          0.1210501811455890, 0.2807092578045410, 0.1210501811455890;...
          0.1210501811455890, 0.1210501811455890, 0.2807092578045410;...
          0.1210501811455890, 0.4771903799042800, 0.2807092578045410;...
          0.2807092578045410, 0.1210501811455890, 0.1210501811455890;...
          0.4771903799042800, 0.2807092578045410, 0.1210501811455890;...
          0.5942562694800070, 0.0327794682164427, 0.3401847940871080;...
          0.5942562694800070, 0.0327794682164427, 0.0327794682164427;...
          0.0327794682164427, 0.0327794682164427, 0.5942562694800070;...
          0.3401847940871080, 0.5942562694800070, 0.0327794682164427;...
          0.0327794682164427, 0.3401847940871080, 0.5942562694800070;...
          0.0327794682164427, 0.5942562694800070, 0.0327794682164427;...
          0.3401847940871080, 0.0327794682164427, 0.5942562694800070;...
          0.0327794682164427, 0.3401847940871080, 0.0327794682164427;...
          0.0327794682164427, 0.0327794682164427, 0.3401847940871080;...
          0.0327794682164427, 0.5942562694800070, 0.3401847940871080;...
          0.3401847940871080, 0.0327794682164427, 0.0327794682164427;...
          0.5942562694800070, 0.3401847940871080, 0.0327794682164427;...
          0.8011772846583440, 0.0324852815648230, 0.1338521522120100;...
          0.8011772846583440, 0.0324852815648230, 0.0324852815648230;...
          0.0324852815648230, 0.0324852815648230, 0.8011772846583440;...
          0.1338521522120100, 0.8011772846583440, 0.0324852815648230;...
          0.0324852815648230, 0.1338521522120100, 0.8011772846583440;...
          0.0324852815648230, 0.8011772846583440, 0.0324852815648230;...
          0.1338521522120100, 0.0324852815648230, 0.8011772846583440;...
          0.0324852815648230, 0.1338521522120100, 0.0324852815648230;...
          0.0324852815648230, 0.0324852815648230, 0.1338521522120100;...
          0.0324852815648230, 0.8011772846583440, 0.1338521522120100;...
          0.1338521522120100, 0.0324852815648230, 0.0324852815648230;...
          0.8011772846583440, 0.1338521522120100, 0.0324852815648230;...
          0.6280718454753660, 0.1749793421839390, 0.0219694701567559;...
          0.6280718454753660, 0.1749793421839390, 0.1749793421839390;...
          0.1749793421839390, 0.1749793421839390, 0.6280718454753660;...
          0.0219694701567559, 0.6280718454753660, 0.1749793421839390;...
          0.1749793421839390, 0.0219694701567559, 0.6280718454753660;...
          0.1749793421839390, 0.6280718454753660, 0.1749793421839390;...
          0.0219694701567559, 0.1749793421839390, 0.6280718454753660;...
          0.1749793421839390, 0.0219694701567559, 0.1749793421839390;...
          0.1749793421839390, 0.1749793421839390, 0.0219694701567559;...
          0.1749793421839390, 0.6280718454753660, 0.0219694701567559;...
          0.0219694701567559, 0.1749793421839390, 0.1749793421839390;...
          0.6280718454753660, 0.0219694701567559, 0.1749793421839390;...
        ].';

        quadRule.weights = [...
          %
          0.0078999622593368;...
          0.0044895099987115;...
          0.0044895099987115;...
          0.0044895099987115;...
          0.0044895099987115;...
          0.0016448599527989;...
          0.0016448599527989;...
          0.0016448599527989;...
          0.0016448599527989;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0018989802033659;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0000603240573899;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0042899553300760;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0016893119466260;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0010960245461726;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
          0.0021511726331437;...
        ].';

      otherwise

        error(['La règle d''ordre', int2str(Nquad), 'n''est pas prise en charge.']);

      end

      quadRule.numQuad = length(quadRule.weights);
      quadRule.dimension = 3;

    end

  end

  methods

    function quadRule = QuadratureObject(dimension)

      if (nargin > 0)

        switch (dimension)
        case 0
          quadRule = FEPack.tools.QuadratureObject.quadrature_from_points(0, 1);
        case 1
          quadRule = FEPack.tools.QuadratureObject.symetrical_Gauss_segment(6, 0, 1);
        case 2
          quadRule = FEPack.tools.QuadratureObject.symetrical_Gauss_triangle(6);
          % quadRule = FEPack.tools.QuadratureObject.Gauss_Lobatto_order_3;
          % quadRule = FEPack.tools.QuadratureObject.symetrical_Gauss_triangle(8);
        case 3
          quadRule = FEPack.tools.QuadratureObject.symetrical_Gauss_tetrahedron(6);
        otherwise
          error('La dimension doit être un entier compris entre 0 et 3.');
        end

      end

    end

  end

end
