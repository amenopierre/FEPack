10/05/22
MAJ 30/06/22
J'ai décidé de migrer totalement sur MATLAB. Je tiens à en écrire les raisons,
pour être sûr de m'en rappeler lorsqu'on me les demandera.

1. XLiFE++ est écrit en C++ : Le temps passé à débugger mon code, entre erreurs
de syntaxe et erreurs de segmentation, m'est insupportable.

2. Un code souvent lourd : XLiFE++ ne permet pas certaines facilités. Par exemple,
pour construire le translaté d'une fonction déjà définie, il faut écrire une nouvelle fonction.
Pareil l'accès aux indices des noeuds du maillage pour respecter la périodicité.

3. Des erreurs XLiFE++ que je ne comprends pas toujours.
  3.a. Questions d'inconnues incohérentes avec projection (je n'en peux plus de cette erreur)

4. XLiFE++ (notamment la version sur les serveurs) évolue beaucoup : je me retrouve avec des
bugs qui disparaissent ou qui apparaissent d'une version à une autre. Parmi ces bugs, on
peut citer
  4.1. la fonction evaluate qui produisait des nan avec une ancienne version (cf. les échanges de décembre 2020 entre Sonia et Eric Lunéville)
  4.2. l'objet Projector qu'on ne peut plus utiliser pour des EF 1D depuis la version 2.3
  4.3. -> la syntaxe de Space qui a complètement changé. Dans la version 2.3 d'XLiFE, ils n'ont même pas laissé (ne serait-ce que temporairement)
       la possibilité d'utiliser l'ancienne syntaxe.
       -> J'ai essayé de contourner ce changement en installant en local sur les serveurs la version 2.2 d'XLiFE (qui permet d'utiliser l'ancienne syntaxe). Mais
       pour une raison que j'ignore, Gmsh met depuis beaucoup plus de temps à tourner sur les serveurs. Une ligne de génération de maillage qui prend quelques
       secondes sur mon ordinateur tournait depuis 5 jours sur le serveur (voir Capture d'écran 30-06-22).
       -> Je me suis donc résigné à changer la syntaxe dans mon code (on parle d'une 20aine d'occurrences pour demi-guide-xlifepp SEULEMENT). Bien entendu, cela a nécessité
       une adaptation avec les champs de FEObject.
       -> Apparemment, certaines fonctions ne fonctionnent plus pour du 1D (intersectionOfSegments())

5. La documentation n'est pas toujours très précise. Par exemple, la fonction TensorKernel, qui permet de définir les intégrales avec opérateurs DtN,
   apparaît 3 fois dans la documentation en date du 08-04-22, et plus précisément, son utilisation apparaît 1 fois, sous la forme
              TensorKernel (vecteurs_de_base_spectrale, matrice_de_coefficients).
   Ce que je ne savais pas, c'est qu'il y a un 3e argument mis par défaut à False. J'ai donc passé 5 jours à essayer de savoir pourquoi mon code ne
   fonctionnait pas, pour me rendre compte qu'il fallait en fait passer mettre ce 3e argument à True :
              TensorKernel (vecteurs_de_base_spectrale, matrice_de_coefficients, true).

6. Je préfère avoir un code que j'ai écrit moi-même, et passer sur XLiFE++ en cas de
force majeure.
